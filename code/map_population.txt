sprintf(firsts[0].rhs,"<AOBE>");
sprintf(firsts[1].rhs,"<output_plist>");
sprintf(firsts[2].rhs,"<idList>");
sprintf(firsts[3].rhs,"<statement>");
sprintf(firsts[4].rhs,"<whichStmt>");
sprintf(firsts[5].rhs,"<WithLogOp>");
sprintf(firsts[6].rhs,"<moduleReuseStmt>");
sprintf(firsts[7].rhs,"<idList_ex>");
sprintf(firsts[8].rhs,"<declareStmt>");
sprintf(firsts[9].rhs,"<MultiCase>");
sprintf(firsts[10].rhs,"<simpleStmt>");
sprintf(firsts[11].rhs,"<expression>");
sprintf(firsts[12].rhs,"<term>");
sprintf(firsts[13].rhs,"<index>");
sprintf(firsts[14].rhs,"<module>");
sprintf(firsts[15].rhs,"<lvalueARRStmt>");
sprintf(firsts[16].rhs,"<negOrPosAE>");
sprintf(firsts[17].rhs,"<dataType>");
sprintf(firsts[18].rhs,"<input_plist>");
sprintf(firsts[19].rhs,"<var>");
sprintf(firsts[20].rhs,"<op2>");
sprintf(firsts[21].rhs,"<N4>");
sprintf(firsts[22].rhs,"<output_plist_ex>");
sprintf(firsts[23].rhs,"<driverModule>");
sprintf(firsts[24].rhs,"<program>");
sprintf(firsts[25].rhs,"<iterativeStmt>");
sprintf(firsts[26].rhs,"<caseStmts>");
sprintf(firsts[27].rhs,"<logicalOp>");
sprintf(firsts[28].rhs,"<whichId>");
sprintf(firsts[29].rhs,"<ioStmt>");
sprintf(firsts[30].rhs,"<input_plist_ex>");
sprintf(firsts[31].rhs,"<ret>");
sprintf(firsts[32].rhs,"<WithRelOp>");
sprintf(firsts[33].rhs,"<condionalStmt>");
sprintf(firsts[34].rhs,"<optional>");
sprintf(firsts[35].rhs,"<op1>");
sprintf(firsts[36].rhs,"<range>");
sprintf(firsts[37].rhs,"<relationalOp>");
sprintf(firsts[38].rhs,"<BorNBAE>");
sprintf(firsts[39].rhs,"<factor>");
sprintf(firsts[40].rhs,"<value>");
sprintf(firsts[41].rhs,"<moduleDeclarations>");
sprintf(firsts[42].rhs,"<otherModules>");
sprintf(firsts[43].rhs,"<type>");
sprintf(firsts[44].rhs,"<moduleDeclaration>");
sprintf(firsts[45].rhs,"<moduleDef>");
sprintf(firsts[46].rhs,"<default>");
sprintf(firsts[47].rhs,"<N5>");
sprintf(firsts[48].rhs,"<assignmentStmt>");
sprintf(firsts[49].rhs,"<lvalueIDStmt>");
sprintf(firsts[50].rhs,"<statements>");
sprintf(firsts[51].rhs,"<arithmeticExpr>");
sprintf(firsts[52].rhs,"<AnyTerm>");
