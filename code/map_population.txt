sprintf(map_t[0].incoming,"INTEGER");
map_t[0].token=0;
sprintf(map_t[1].incoming,"REAL");
map_t[1].token=1;
sprintf(map_t[2].incoming,"BOOLEAN");
map_t[2].token=2;
sprintf(map_t[3].incoming,"OF");
map_t[3].token=3;
sprintf(map_t[4].incoming,"ARRAY");
map_t[4].token=4;
sprintf(map_t[5].incoming,"START");
map_t[5].token=5;
sprintf(map_t[6].incoming,"END");
map_t[6].token=6;
sprintf(map_t[7].incoming,"DECLARE");
map_t[7].token=7;
sprintf(map_t[8].incoming,"MODULE");
map_t[8].token=8;
sprintf(map_t[9].incoming,"DRIVER");
map_t[9].token=9;
sprintf(map_t[10].incoming,"PROGRAM");
map_t[10].token=10;
sprintf(map_t[11].incoming,"GET_VALUE");
map_t[11].token=11;
sprintf(map_t[12].incoming,"PRINT");
map_t[12].token=12;
sprintf(map_t[13].incoming,"USE");
map_t[13].token=13;
sprintf(map_t[14].incoming,"WITH");
map_t[14].token=14;
sprintf(map_t[15].incoming,"PARAMETERS");
map_t[15].token=15;
sprintf(map_t[16].incoming,"TRUE");
map_t[16].token=16;
sprintf(map_t[17].incoming,"FALSE");
map_t[17].token=17;
sprintf(map_t[18].incoming,"TAKES");
map_t[18].token=18;
sprintf(map_t[19].incoming,"INPUT");
map_t[19].token=19;
sprintf(map_t[20].incoming,"RETURNS");
map_t[20].token=20;
sprintf(map_t[21].incoming,"AND");
map_t[21].token=21;
sprintf(map_t[22].incoming,"OR");
map_t[22].token=22;
sprintf(map_t[23].incoming,"FOR");
map_t[23].token=23;
sprintf(map_t[24].incoming,"IN");
map_t[24].token=24;
sprintf(map_t[25].incoming,"SWITCH");
map_t[25].token=25;
sprintf(map_t[26].incoming,"CASE");
map_t[26].token=26;
sprintf(map_t[27].incoming,"BREAK");
map_t[27].token=27;
sprintf(map_t[28].incoming,"DEFAULT");
map_t[28].token=28;
sprintf(map_t[29].incoming,"WHILE");
map_t[29].token=29;
sprintf(map_t[30].incoming,"PLUS");
map_t[30].token=30;
sprintf(map_t[31].incoming,"MINUS");
map_t[31].token=31;
sprintf(map_t[32].incoming,"MUL");
map_t[32].token=32;
sprintf(map_t[33].incoming,"DIV");
map_t[33].token=33;
sprintf(map_t[34].incoming,"LT");
map_t[34].token=34;
sprintf(map_t[35].incoming,"LE");
map_t[35].token=35;
sprintf(map_t[36].incoming,"GE");
map_t[36].token=36;
sprintf(map_t[37].incoming,"GT");
map_t[37].token=37;
sprintf(map_t[38].incoming,"EQ");
map_t[38].token=38;
sprintf(map_t[39].incoming,"NE");
map_t[39].token=39;
sprintf(map_t[40].incoming,"DEF");
map_t[40].token=40;
sprintf(map_t[41].incoming,"ENDDEF");
map_t[41].token=41;
sprintf(map_t[42].incoming,"COLON");
map_t[42].token=42;
sprintf(map_t[43].incoming,"RANGEOP");
map_t[43].token=43;
sprintf(map_t[44].incoming,"SEMICOL");
map_t[44].token=44;
sprintf(map_t[45].incoming,"COMMA");
map_t[45].token=45;
sprintf(map_t[46].incoming,"ASSIGNOP");
map_t[46].token=46;
sprintf(map_t[47].incoming,"SQBO");
map_t[47].token=47;
sprintf(map_t[48].incoming,"SQBC");
map_t[48].token=48;
sprintf(map_t[49].incoming,"BO");
map_t[49].token=49;
sprintf(map_t[50].incoming,"BC");
map_t[50].token=50;
sprintf(map_t[51].incoming,"COMMENTMARK");
map_t[51].token=51;
